# include themes/rose-pine.conf
# include themes/gruvbox_dark.conf

font_family 		 Source Code Pro

bold_font        auto
italic_font      auto
bold_italic_font auto

# font_size 11.0
font_size 12.0

# modify_font underline_thickness 150%
# modify_font underline_position +3

modify_font underline_thickness 100%
modify_font underline_position +0


cursor_shape block
cursor_blink_interval 0

update_check_interval 0

#: }}}

#: Scrollback {{{

# scrollback_lines 2000

#: Number of lines of history to keep in memory for scrolling back.
#: Memory is allocated on demand. Negative numbers are (effectively)
#: infinite scrollback. Note that using very large scrollback is not
#: recommended as it can slow down performance of the terminal and
#: also use large amounts of RAM. Instead, consider using
#: scrollback_pager_history_size. Note that on config reload if this
#: is changed it will only affect newly created windows, not existing
#: ones.

# scrollback_pager less --chop-long-lines --RAW-CONTROL-CHARS +INPUT_LINE_NUMBER

#: Program with which to view scrollback in a new window. The
#: scrollback buffer is passed as STDIN to this program. If you change
#: it, make sure the program you use can handle ANSI escape sequences
#: for colors and text formatting. INPUT_LINE_NUMBER in the command
#: line above will be replaced by an integer representing which line
#: should be at the top of the screen. Similarly CURSOR_LINE and
#: CURSOR_COLUMN will be replaced by the current cursor position or
#: set to 0 if there is no cursor, for example, when showing the last
#: command output.

scrollback_pager_history_size 2000

#: Separate scrollback history size (in MB), used only for browsing
#: the scrollback buffer with pager. This separate buffer is not
#: available for interactive scrolling but will be piped to the pager
#: program when viewing scrollback buffer in a separate window. The
#: current implementation stores the data in UTF-8, so approximately
#: 10000 lines per megabyte at 100 chars per line, for pure ASCII,
#: unformatted text. A value of zero or less disables this feature.
#: The maximum allowed size is 4GB. Note that on config reload if this
#: is changed it will only affect newly created windows, not existing
#: ones.

# scrollback_fill_enlarged_window no

#: Fill new space with lines from the scrollback buffer after
#: enlarging a window.

wheel_scroll_multiplier 10.0

#: Multiplier for the number of lines scrolled by the mouse wheel.
#: Note that this is only used for low precision scrolling devices,
#: not for high precision scrolling devices on platforms such as macOS
#: and Wayland. Use negative numbers to change scroll direction. See
#: also wheel_scroll_min_lines.

# wheel_scroll_min_lines 1

#: The minimum number of lines scrolled by the mouse wheel. The scroll
#: multiplier wheel_scroll_multiplier only takes effect after it
#: reaches this number. Note that this is only used for low precision
#: scrolling devices like wheel mice that scroll by very small amounts
#: when using the wheel. With a negative number, the minimum number of
#: lines will always be added.

# touch_scroll_multiplier 1.0

#: Multiplier for the number of lines scrolled by a touchpad. Note
#: that this is only used for high precision scrolling devices on
#: platforms such as macOS and Wayland. Use negative numbers to change
#: scroll direction.

#: }}}

#: Mouse {{{

mouse_hide_wait -1 

#: hidden immediately when typing text

# url_color #0087bd
# url_style curly

#: The color and style for highlighting URLs on mouse-over. url_style
#: can be one of: none, straight, double, curly, dotted, dashed.

# open_url_with default

#: The program to open clicked URLs. The special value default will
#: first look for any URL handlers defined via the open_actions
#: <https://sw.kovidgoyal.net/kitty/open_actions/> facility and if non
#: are found, it will use the Operating System's default URL handler
#: (open on macOS and xdg-open on Linux).

# url_prefixes file ftp ftps gemini git gopher http https irc ircs kitty mailto news sftp ssh

#: The set of URL prefixes to look for when detecting a URL under the
#: mouse cursor.

detect_urls yes

#: Detect URLs under the mouse. Detected URLs are highlighted with an
#: underline and the mouse cursor becomes a hand over them. Even if
#: this option is disabled, URLs are still clickable. See also the
#: underline_hyperlinks option to control how hyperlinks (as opposed
#: to plain text URLs) are displayed.

# url_excluded_characters
# copy_on_select no

#: Copy to clipboard or a private buffer on select. With this set to
#: clipboard, selecting text with the mouse will cause the text to be
#: copied to clipboard. Useful on platforms such as macOS that do not
#: have the concept of primary selection. You can instead specify a
#: name such as a1 to copy to a private kitty buffer. Map a shortcut
#: with the paste_from_buffer action to paste from this private
#: buffer. For example::

#:     copy_on_select a1
#:     map shift+cmd+v paste_from_buffer a1

#: Note that copying to the clipboard is a security risk, as all
#: programs, including websites open in your browser can read the
#: contents of the system clipboard.

paste_actions quote-urls-at-prompt,confirm

#: A comma separated list of actions to take when pasting text into
#: the terminal. The supported paste actions are:

#: quote-urls-at-prompt:
#:     If the text being pasted is a URL and the cursor is at a shell prompt,
#:     automatically quote the URL (needs shell_integration).
#: replace-dangerous-control-codes
#:     Replace dangerous control codes from pasted text, without confirmation.
#: replace-newline
#:     Replace the newline character from pasted text, without confirmation.
#: confirm:
#:     Confirm the paste if the text to be pasted contains any terminal control codes
#:     as this can be dangerous, leading to code execution if the shell/program running
#:     in the terminal does not properly handle these.
#: confirm-if-large
#:     Confirm the paste if it is very large (larger than 16KB) as pasting
#:     large amounts of text into shells can be very slow.
#: filter:
#:     Run the filter_paste() function from the file paste-actions.py in
#:     the kitty config directory on the pasted text. The text returned by the
#:     function will be actually pasted.
#: no-op:
#:     Has no effect.

strip_trailing_spaces smart

#: Remove spaces at the end of lines when copying to clipboard. A
#: value of smart will do it when using normal selections, but not
#: rectangle selections. A value of always will always do it.

# select_by_word_characters @-./_~?&=%+#

#: Characters considered part of a word when double clicking. In
#: addition to these characters any character that is marked as an
#: alphanumeric character in the Unicode database will be matched.

# select_by_word_characters_forward

#: Characters considered part of a word when extending the selection
#: forward on double clicking. In addition to these characters any
#: character that is marked as an alphanumeric character in the
#: Unicode database will be matched.

#: If empty (default) select_by_word_characters will be used for both
#: directions.

# click_interval -1.0

#: The interval between successive clicks to detect double/triple
#: clicks (in seconds). Negative numbers will use the system default
#: instead, if available, or fallback to 0.5.

# focus_follows_mouse no

#: Set the active window to the window under the mouse when moving the
#: mouse around. On macOS, this will also cause the OS Window under
#: the mouse to be focused automatically when the mouse enters it.

pointer_shape_when_grabbed arrow

#: The shape of the mouse pointer when the program running in the
#: terminal grabs the mouse.

default_pointer_shape beam

#: The default shape of the mouse pointer.

# pointer_shape_when_dragging beam

#: The default shape of the mouse pointer when dragging across text.

#: Mouse actions {{{

#: Mouse buttons can be mapped to perform arbitrary actions. The
#: syntax is:

#: .. code-block:: none

#:     mouse_map button-name event-type modes action

#: Where button-name is one of left, middle, right, b1 ... b8 with
#: added keyboard modifiers. For example: ctrl+shift+left refers to
#: holding the Ctrl+Shift keys while clicking with the left mouse
#: button. The value b1 ... b8 can be used to refer to up to eight
#: buttons on a mouse.

#: event-type is one of press, release, doublepress, triplepress,
#: click, doubleclick. modes indicates whether the action is performed
#: when the mouse is grabbed by the program running in the terminal,
#: or not. The values are grabbed or ungrabbed or a comma separated
#: combination of them. grabbed refers to when the program running in
#: the terminal has requested mouse events. Note that the click and
#: double click events have a delay of click_interval to disambiguate
#: from double and triple presses.

#: You can run kitty with the kitty --debug-input command line option
#: to see mouse events. See the builtin actions below to get a sense
#: of what is possible.

#: If you want to unmap a button, map it to nothing. For example, to
#: disable opening of URLs with a plain click::

#:     mouse_map left click ungrabbed

#: See all the mappable actions including mouse actions here
#: <https://sw.kovidgoyal.net/kitty/actions/>.

#: .. note::
#:     Once a selection is started, releasing the button that started it will
#:     automatically end it and no release event will be dispatched.

# clear_all_mouse_actions no

#: Remove all mouse action definitions up to this point. Useful, for
#: instance, to remove the default mouse actions.

#: Click the link under the mouse or move the cursor

# mouse_map left click ungrabbed mouse_handle_click selection link prompt

#::  First check for a selection and if one exists do nothing. Then
#::  check for a link under the mouse cursor and if one exists, click
#::  it. Finally check if the click happened at the current shell
#::  prompt and if so, move the cursor to the click location. Note
#::  that this requires shell integration
#::  <https://sw.kovidgoyal.net/kitty/shell-integration/> to work.

#: Click the link under the mouse or move the cursor even when grabbed

# mouse_map shift+left click grabbed,ungrabbed mouse_handle_click selection link prompt

#::  Same as above, except that the action is performed even when the
#::  mouse is grabbed by the program running in the terminal.

#: Click the link under the mouse cursor

# mouse_map ctrl+shift+left release grabbed,ungrabbed mouse_handle_click link

#::  Variant with Ctrl+Shift is present because the simple click based
#::  version has an unavoidable delay of click_interval, to
#::  disambiguate clicks from double clicks.

#: Discard press event for link click

# mouse_map ctrl+shift+left press grabbed discard_event

#::  Prevent this press event from being sent to the program that has
#::  grabbed the mouse, as the corresponding release event is used to
#::  open a URL.

#: Paste from the primary selection

# mouse_map middle release ungrabbed paste_from_selection

#: Start selecting text

# mouse_map left press ungrabbed mouse_selection normal

#: Start selecting text in a rectangle

# mouse_map ctrl+alt+left press ungrabbed mouse_selection rectangle

#: Select a word

# mouse_map left doublepress ungrabbed mouse_selection word

#: Select a line

# mouse_map left triplepress ungrabbed mouse_selection line

#: Select line from point

# mouse_map ctrl+alt+left triplepress ungrabbed mouse_selection line_from_point

#::  Select from the clicked point to the end of the line. If you
#::  would like to select the word at the point and then extend to the
#::  rest of the line, change `line_from_point` to
#::  `word_and_line_from_point`.

#: Extend the current selection

# mouse_map right press ungrabbed mouse_selection extend

#::  If you want only the end of the selection to be moved instead of
#::  the nearest boundary, use move-end instead of extend.

#: Paste from the primary selection even when grabbed

# mouse_map shift+middle release ungrabbed,grabbed paste_selection
# mouse_map shift+middle press grabbed discard_event

#: Start selecting text even when grabbed

# mouse_map shift+left press ungrabbed,grabbed mouse_selection normal

#: Start selecting text in a rectangle even when grabbed

# mouse_map ctrl+shift+alt+left press ungrabbed,grabbed mouse_selection rectangle

#: Select a word even when grabbed

# mouse_map shift+left doublepress ungrabbed,grabbed mouse_selection word

#: Select a line even when grabbed

# mouse_map shift+left triplepress ungrabbed,grabbed mouse_selection line

#: Select line from point even when grabbed

# mouse_map ctrl+shift+alt+left triplepress ungrabbed,grabbed mouse_selection line_from_point

#::  Select from the clicked point to the end of the line even when
#::  grabbed. If you would like to select the word at the point and
#::  then extend to the rest of the line, change `line_from_point` to
#::  `word_and_line_from_point`.

#: Extend the current selection even when grabbed

# mouse_map shift+right press ungrabbed,grabbed mouse_selection extend

#: Show clicked command output in pager

# mouse_map ctrl+shift+right press ungrabbed mouse_show_command_output

#::  Requires shell integration
#::  <https://sw.kovidgoyal.net/kitty/shell-integration/> to work.

#: }}}

#: }}}

#: Performance tuning {{{

# repaint_delay 10

#: Delay between screen updates (in milliseconds). Decreasing it,
#: increases frames-per-second (FPS) at the cost of more CPU usage.
#: The default value yields ~100 FPS which is more than sufficient for
#: most uses. Note that to actually achieve 100 FPS, you have to
#: either set sync_to_monitor to no or use a monitor with a high
#: refresh rate. Also, to minimize latency when there is pending input
#: to be processed, this option is ignored.

input_delay 2

#: Delay before input from the program running in the terminal is
#: processed (in milliseconds). Note that decreasing it will increase
#: responsiveness, but also increase CPU usage and might cause flicker
#: in full screen programs that redraw the entire screen on each loop,
#: because kitty is so fast that partial screen updates will be drawn.
#: This setting is ignored when the input buffer is almost full.

# sync_to_monitor yes

#: Sync screen updates to the refresh rate of the monitor. This
#: prevents screen tearing
#: <https://en.wikipedia.org/wiki/Screen_tearing> when scrolling.
#: However, it limits the rendering speed to the refresh rate of your
#: monitor. With a very high speed mouse/high keyboard repeat rate,
#: you may notice some slight input latency. If so, set this to no.

#: }}}

#: Terminal bell {{{

 enable_audio_bell no

#: }}}

#: Window layout {{{

window_padding_width 4
inactive_text_alpha 0.8
confirm_os_window_close 0

#: }}}


#: Advanced {{{

allow_remote_control yes

shell_integration enabled
#: <https://sw.kovidgoyal.net/kitty/shell-integration/> for details

# term xterm-kitty
# term xterm-256color

#: The value of the TERM environment variable to set. Changing this
#: can break many terminal programs, only change it if you know what
#: you are doing, not because you read some advice on "Stack Overflow"
#: to change it. The TERM variable is used by various programs to get
#: information about the capabilities and behavior of the terminal. If
#: you change it, depending on what programs you run, and how
#: different the terminal you are changing it to is, various things
#: from key-presses, to colors, to various advanced features may not
#: work. Changing this option by reloading the config will only affect
#: newly created windows.

#: }}}

# map kitty_mod+s  paste_from_selection

#: Scrolling {{{

#: Scroll page up

# map kitty_mod+page_up scroll_page_up
# map cmd+page_up       scroll_page_up

#: Scroll page down

# map kitty_mod+page_down scroll_page_down
# map cmd+page_down       scroll_page_down

#: }}}

#: Window management {{{

# map kitty_mod+enter new_window

#::  You can open a new window with the current working directory set
#::  to the working directory of the current window using::

#::      map ctrl+alt+enter launch --cwd=current


# map kitty_mod+f7 focus_visible_window

#::  Display overlay numbers and alphabets on the window, and switch
#::  the focus to the window when you press the key. When there are
#::  only two windows, the focus will be switched directly without
#::  displaying the overlay. You can change the overlay characters and
#::  their order with option visual_window_select_characters.

#: Visually swap window with another

# map kitty_mod+f8 swap_with_window

#::  Works like focus_visible_window above, but swaps the window.

#: }}}

#: Layout management {{{

#: Next layout

# map kitty_mod+l next_layout


#: You can also create shortcuts to switch to specific layouts::

#:     map ctrl+alt+t goto_layout tall
#:     map ctrl+alt+s goto_layout stack

#: Similarly, to switch back to the previous layout::

#:     map ctrl+alt+p last_used_layout

#: There is also a toggle_layout action that switches to the named
#: layout or back to the previous layout if in the named layout.
#: Useful to temporarily "zoom" the active window by switching to the
#: stack layout::

#:     map ctrl+alt+z toggle_layout stack
#: }}}

# tab bar ##############################

tab_bar_style separator

tab_bar_align center
# tab_bar_align left

tab_separator ""
tab_title_template "❯ {bell_symbol}{fmt.fg.red}{fmt.fg._d4be98}{index}: {title}{fmt.fg.tab} ❮"

# ᐳ ᗒ ᐅ ⟾  
#
#: title
#:     The current tab title.
#: index
#:     The tab index usable with goto_tab N goto_tab shortcuts.
#: layout_name
#:     The current layout name.
#: num_windows
#:     The number of windows in the tab.
#: num_window_groups
#:     The number of window groups (a window group is a window and all of its overlay windows) in the tab.
#: tab.active_wd
#:     The working directory of the currently active window in the tab
#:     (expensive, requires syscall). Use active_oldest_wd to get
#:     the directory of the oldest foreground process rather than the newest.
#: tab.active_exe
#:     The name of the executable running in the foreground of the currently
#:     active window in the tab (expensive, requires syscall). Use
#:     active_oldest_exe for the oldest foreground process.
#: max_title_length
#:     The maximum title length available.

active_tab_foreground   #a9b665
active_tab_background   #282828
active_tab_font_style   bold-italic
inactive_tab_foreground #282828
inactive_tab_background #282828
inactive_tab_font_style normal

########################################

# BEGIN_KITTY_THEME
# Gruvbox Material Dark Medium
include current-theme.conf
# END_KITTY_THEME

